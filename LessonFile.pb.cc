// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LessonFile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Guitar_learning {

namespace {

const ::google::protobuf::Descriptor* LessonFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LessonFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* LessonFile_Tone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LessonFile_Tone_reflection_ = NULL;
const ::google::protobuf::Descriptor* LessonFile_Note_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LessonFile_Note_reflection_ = NULL;
const ::google::protobuf::Descriptor* LessonFile_Bar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LessonFile_Bar_reflection_ = NULL;
const ::google::protobuf::Descriptor* LessonFile_Track_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LessonFile_Track_reflection_ = NULL;
const ::google::protobuf::Descriptor* LessonFile_bgMysic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LessonFile_bgMysic_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LessonFile_bgMysic_bgType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LessonFile_Visuals_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LessonFile_Visuals_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LessonFile_Visuals_visualType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LessonFile_Lesson_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LessonFile_Lesson_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LessonFile_NoteLength_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LessonFile_ClefType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LessonFile_2eproto() {
  protobuf_AddDesc_LessonFile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LessonFile.proto");
  GOOGLE_CHECK(file != NULL);
  LessonFile_descriptor_ = file->message_type(0);
  static const int LessonFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile, creator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile, lesson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile, signature_),
  };
  LessonFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LessonFile_descriptor_,
      LessonFile::default_instance_,
      LessonFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LessonFile));
  LessonFile_Tone_descriptor_ = LessonFile_descriptor_->nested_type(0);
  static const int LessonFile_Tone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Tone, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Tone, str_),
  };
  LessonFile_Tone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LessonFile_Tone_descriptor_,
      LessonFile_Tone::default_instance_,
      LessonFile_Tone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Tone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Tone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LessonFile_Tone));
  LessonFile_Note_descriptor_ = LessonFile_descriptor_->nested_type(1);
  static const int LessonFile_Note_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, continueto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, continuedfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, slideto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, slidedfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, vibrato_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, ho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, po_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, grouping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, ungrouping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, in_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, tone_),
  };
  LessonFile_Note_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LessonFile_Note_descriptor_,
      LessonFile_Note::default_instance_,
      LessonFile_Note_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Note, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LessonFile_Note));
  LessonFile_Bar_descriptor_ = LessonFile_descriptor_->nested_type(2);
  static const int LessonFile_Bar_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Bar, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Bar, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Bar, repeat_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Bar, repeat_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Bar, next_repeat_ending_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Bar, bar_chord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Bar, notes_),
  };
  LessonFile_Bar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LessonFile_Bar_descriptor_,
      LessonFile_Bar::default_instance_,
      LessonFile_Bar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Bar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Bar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LessonFile_Bar));
  LessonFile_Track_descriptor_ = LessonFile_descriptor_->nested_type(3);
  static const int LessonFile_Track_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Track, clef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Track, beat_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Track, beat_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Track, bars_),
  };
  LessonFile_Track_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LessonFile_Track_descriptor_,
      LessonFile_Track::default_instance_,
      LessonFile_Track_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Track, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Track, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LessonFile_Track));
  LessonFile_bgMysic_descriptor_ = LessonFile_descriptor_->nested_type(4);
  static const int LessonFile_bgMysic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_bgMysic, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_bgMysic, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_bgMysic, data_),
  };
  LessonFile_bgMysic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LessonFile_bgMysic_descriptor_,
      LessonFile_bgMysic::default_instance_,
      LessonFile_bgMysic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_bgMysic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_bgMysic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LessonFile_bgMysic));
  LessonFile_bgMysic_bgType_descriptor_ = LessonFile_bgMysic_descriptor_->enum_type(0);
  LessonFile_Visuals_descriptor_ = LessonFile_descriptor_->nested_type(5);
  static const int LessonFile_Visuals_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Visuals, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Visuals, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Visuals, data_),
  };
  LessonFile_Visuals_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LessonFile_Visuals_descriptor_,
      LessonFile_Visuals::default_instance_,
      LessonFile_Visuals_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Visuals, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Visuals, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LessonFile_Visuals));
  LessonFile_Visuals_visualType_descriptor_ = LessonFile_Visuals_descriptor_->enum_type(0);
  LessonFile_Lesson_descriptor_ = LessonFile_descriptor_->nested_type(6);
  static const int LessonFile_Lesson_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Lesson, track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Lesson, bpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Lesson, bg_music_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Lesson, visuals_),
  };
  LessonFile_Lesson_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LessonFile_Lesson_descriptor_,
      LessonFile_Lesson::default_instance_,
      LessonFile_Lesson_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Lesson, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessonFile_Lesson, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LessonFile_Lesson));
  LessonFile_NoteLength_descriptor_ = LessonFile_descriptor_->enum_type(0);
  LessonFile_ClefType_descriptor_ = LessonFile_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LessonFile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LessonFile_descriptor_, &LessonFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LessonFile_Tone_descriptor_, &LessonFile_Tone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LessonFile_Note_descriptor_, &LessonFile_Note::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LessonFile_Bar_descriptor_, &LessonFile_Bar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LessonFile_Track_descriptor_, &LessonFile_Track::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LessonFile_bgMysic_descriptor_, &LessonFile_bgMysic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LessonFile_Visuals_descriptor_, &LessonFile_Visuals::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LessonFile_Lesson_descriptor_, &LessonFile_Lesson::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LessonFile_2eproto() {
  delete LessonFile::default_instance_;
  delete LessonFile_reflection_;
  delete LessonFile_Tone::default_instance_;
  delete LessonFile_Tone_reflection_;
  delete LessonFile_Note::default_instance_;
  delete LessonFile_Note_reflection_;
  delete LessonFile_Bar::default_instance_;
  delete LessonFile_Bar_reflection_;
  delete LessonFile_Track::default_instance_;
  delete LessonFile_Track_reflection_;
  delete LessonFile_bgMysic::default_instance_;
  delete LessonFile_bgMysic_reflection_;
  delete LessonFile_Visuals::default_instance_;
  delete LessonFile_Visuals_reflection_;
  delete LessonFile_Lesson::default_instance_;
  delete LessonFile_Lesson_reflection_;
}

void protobuf_AddDesc_LessonFile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020LessonFile.proto\022\017Guitar_learning\"\206\013\n\n"
    "LessonFile\022\017\n\007creator\030\001 \001(\t\0222\n\006lesson\030\002 "
    "\002(\0132\".Guitar_learning.LessonFile.Lesson\022"
    "\021\n\tsignature\030\003 \001(\t\032%\n\004Tone\022\r\n\005pitch\030\001 \002("
    "\001\022\016\n\003str\030\002 \001(\r:\0010\032\262\002\n\004Note\0226\n\006length\030\001 \002"
    "(\0162&.Guitar_learning.LessonFile.NoteLeng"
    "th\022\021\n\textension\030\002 \002(\r\022\022\n\ncontinueTo\030\003 \001("
    "\010\022\025\n\rcontinuedFrom\030\004 \001(\010\022\017\n\007slideTo\030\005 \001("
    "\010\022\022\n\nslidedFrom\030\006 \001(\010\022\017\n\007vibrato\030\007 \001(\010\022\n"
    "\n\002HO\030\010 \001(\010\022\n\n\002PO\030\t \001(\010\022\020\n\010grouping\030\n \001(\r"
    "\022\022\n\nungrouping\030\013 \001(\r\022\020\n\010in_group\030\014 \001(\010\022."
    "\n\004tone\030\r \003(\0132 .Guitar_learning.LessonFil"
    "e.Tone\032\261\001\n\003Bar\022\n\n\002id\030\001 \001(\r\022\016\n\006length\030\002 \001"
    "(\r\022\024\n\014repeat_start\030\003 \001(\010\022\025\n\nrepeat_end\030\004"
    " \001(\r:\0011\022\035\n\022next_repeat_ending\030\005 \001(\r:\0010\022\021"
    "\n\tbar_chord\030\006 \001(\t\022/\n\005notes\030\007 \003(\0132 .Guita"
    "r_learning.LessonFile.Note\032\223\001\n\005Track\0222\n\004"
    "clef\030\001 \002(\0162$.Guitar_learning.LessonFile."
    "ClefType\022\022\n\nbeat_count\030\002 \002(\r\022\023\n\013beat_len"
    "gth\030\003 \002(\r\022-\n\004bars\030\004 \003(\0132\037.Guitar_learnin"
    "g.LessonFile.Bar\032\223\001\n\007bgMysic\0228\n\004type\030\001 \002"
    "(\0162*.Guitar_learning.LessonFile.bgMysic."
    "bgType\022\016\n\006header\030\002 \001(\014\022\014\n\004data\030\003 \001(\014\"0\n\006"
    "bgType\022\010\n\004NONE\020\000\022\007\n\003WMA\020\001\022\007\n\003MP3\020\002\022\n\n\006VO"
    "RIBS\020\003\032\272\001\n\007Visuals\022<\n\004type\030\001 \002(\0162..Guita"
    "r_learning.LessonFile.Visuals.visualType"
    "\022\016\n\006header\030\002 \001(\014\022\014\n\004data\030\003 \001(\014\"S\n\nvisual"
    "Type\022\010\n\004NONE\020\000\022\007\n\003WMV\020\001\022\t\n\005MPEG2\020\002\022\t\n\005MP"
    "EG4\020\003\022\010\n\004DIVX\020\004\022\010\n\004XVID\020\005\022\010\n\004X264\020\006\032\264\001\n\006"
    "Lesson\0220\n\005track\030\001 \002(\0132!.Guitar_learning."
    "LessonFile.Track\022\013\n\003bpm\030\002 \001(\r\0225\n\010bg_musi"
    "c\030\003 \001(\0132#.Guitar_learning.LessonFile.bgM"
    "ysic\0224\n\007visuals\030\004 \001(\0132#.Guitar_learning."
    "LessonFile.Visuals\"N\n\nNoteLength\022\010\n\004nl64"
    "\020\001\022\010\n\004nl32\020\002\022\010\n\004nl16\020\004\022\007\n\003nl8\020\010\022\007\n\003nl4\020\020"
    "\022\007\n\003nl2\020 \022\007\n\003nl1\020@\" \n\010ClefType\022\n\n\006treble"
    "\020\001\022\010\n\004bass\020\002", 1452);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LessonFile.proto", &protobuf_RegisterTypes);
  LessonFile::default_instance_ = new LessonFile();
  LessonFile_Tone::default_instance_ = new LessonFile_Tone();
  LessonFile_Note::default_instance_ = new LessonFile_Note();
  LessonFile_Bar::default_instance_ = new LessonFile_Bar();
  LessonFile_Track::default_instance_ = new LessonFile_Track();
  LessonFile_bgMysic::default_instance_ = new LessonFile_bgMysic();
  LessonFile_Visuals::default_instance_ = new LessonFile_Visuals();
  LessonFile_Lesson::default_instance_ = new LessonFile_Lesson();
  LessonFile::default_instance_->InitAsDefaultInstance();
  LessonFile_Tone::default_instance_->InitAsDefaultInstance();
  LessonFile_Note::default_instance_->InitAsDefaultInstance();
  LessonFile_Bar::default_instance_->InitAsDefaultInstance();
  LessonFile_Track::default_instance_->InitAsDefaultInstance();
  LessonFile_bgMysic::default_instance_->InitAsDefaultInstance();
  LessonFile_Visuals::default_instance_->InitAsDefaultInstance();
  LessonFile_Lesson::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LessonFile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LessonFile_2eproto {
  StaticDescriptorInitializer_LessonFile_2eproto() {
    protobuf_AddDesc_LessonFile_2eproto();
  }
} static_descriptor_initializer_LessonFile_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* LessonFile_NoteLength_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessonFile_NoteLength_descriptor_;
}
bool LessonFile_NoteLength_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LessonFile_NoteLength LessonFile::nl64;
const LessonFile_NoteLength LessonFile::nl32;
const LessonFile_NoteLength LessonFile::nl16;
const LessonFile_NoteLength LessonFile::nl8;
const LessonFile_NoteLength LessonFile::nl4;
const LessonFile_NoteLength LessonFile::nl2;
const LessonFile_NoteLength LessonFile::nl1;
const LessonFile_NoteLength LessonFile::NoteLength_MIN;
const LessonFile_NoteLength LessonFile::NoteLength_MAX;
const int LessonFile::NoteLength_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LessonFile_ClefType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessonFile_ClefType_descriptor_;
}
bool LessonFile_ClefType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LessonFile_ClefType LessonFile::treble;
const LessonFile_ClefType LessonFile::bass;
const LessonFile_ClefType LessonFile::ClefType_MIN;
const LessonFile_ClefType LessonFile::ClefType_MAX;
const int LessonFile::ClefType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LessonFile_Tone::kPitchFieldNumber;
const int LessonFile_Tone::kStrFieldNumber;
#endif  // !_MSC_VER

LessonFile_Tone::LessonFile_Tone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LessonFile_Tone::InitAsDefaultInstance() {
}

LessonFile_Tone::LessonFile_Tone(const LessonFile_Tone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LessonFile_Tone::SharedCtor() {
  _cached_size_ = 0;
  pitch_ = 0;
  str_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LessonFile_Tone::~LessonFile_Tone() {
  SharedDtor();
}

void LessonFile_Tone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LessonFile_Tone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LessonFile_Tone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessonFile_Tone_descriptor_;
}

const LessonFile_Tone& LessonFile_Tone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LessonFile_2eproto();  return *default_instance_;
}

LessonFile_Tone* LessonFile_Tone::default_instance_ = NULL;

LessonFile_Tone* LessonFile_Tone::New() const {
  return new LessonFile_Tone;
}

void LessonFile_Tone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pitch_ = 0;
    str_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LessonFile_Tone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double pitch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_str;
        break;
      }
      
      // optional uint32 str = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_str:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &str_)));
          set_has_str();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LessonFile_Tone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double pitch = 1;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pitch(), output);
  }
  
  // optional uint32 str = 2 [default = 0];
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LessonFile_Tone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double pitch = 1;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pitch(), target);
  }
  
  // optional uint32 str = 2 [default = 0];
  if (has_str()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LessonFile_Tone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double pitch = 1;
    if (has_pitch()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 str = 2 [default = 0];
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LessonFile_Tone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LessonFile_Tone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LessonFile_Tone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LessonFile_Tone::MergeFrom(const LessonFile_Tone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LessonFile_Tone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LessonFile_Tone::CopyFrom(const LessonFile_Tone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LessonFile_Tone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LessonFile_Tone::Swap(LessonFile_Tone* other) {
  if (other != this) {
    std::swap(pitch_, other->pitch_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LessonFile_Tone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LessonFile_Tone_descriptor_;
  metadata.reflection = LessonFile_Tone_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LessonFile_Note::kLengthFieldNumber;
const int LessonFile_Note::kExtensionFieldNumber;
const int LessonFile_Note::kContinueToFieldNumber;
const int LessonFile_Note::kContinuedFromFieldNumber;
const int LessonFile_Note::kSlideToFieldNumber;
const int LessonFile_Note::kSlidedFromFieldNumber;
const int LessonFile_Note::kVibratoFieldNumber;
const int LessonFile_Note::kHOFieldNumber;
const int LessonFile_Note::kPOFieldNumber;
const int LessonFile_Note::kGroupingFieldNumber;
const int LessonFile_Note::kUngroupingFieldNumber;
const int LessonFile_Note::kInGroupFieldNumber;
const int LessonFile_Note::kToneFieldNumber;
#endif  // !_MSC_VER

LessonFile_Note::LessonFile_Note()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LessonFile_Note::InitAsDefaultInstance() {
}

LessonFile_Note::LessonFile_Note(const LessonFile_Note& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LessonFile_Note::SharedCtor() {
  _cached_size_ = 0;
  length_ = 1;
  extension_ = 0u;
  continueto_ = false;
  continuedfrom_ = false;
  slideto_ = false;
  slidedfrom_ = false;
  vibrato_ = false;
  ho_ = false;
  po_ = false;
  grouping_ = 0u;
  ungrouping_ = 0u;
  in_group_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LessonFile_Note::~LessonFile_Note() {
  SharedDtor();
}

void LessonFile_Note::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LessonFile_Note::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LessonFile_Note::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessonFile_Note_descriptor_;
}

const LessonFile_Note& LessonFile_Note::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LessonFile_2eproto();  return *default_instance_;
}

LessonFile_Note* LessonFile_Note::default_instance_ = NULL;

LessonFile_Note* LessonFile_Note::New() const {
  return new LessonFile_Note;
}

void LessonFile_Note::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 1;
    extension_ = 0u;
    continueto_ = false;
    continuedfrom_ = false;
    slideto_ = false;
    slidedfrom_ = false;
    vibrato_ = false;
    ho_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    po_ = false;
    grouping_ = 0u;
    ungrouping_ = 0u;
    in_group_ = false;
  }
  tone_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LessonFile_Note::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Guitar_learning.LessonFile.NoteLength length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Guitar_learning::LessonFile_NoteLength_IsValid(value)) {
            set_length(static_cast< ::Guitar_learning::LessonFile_NoteLength >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_extension;
        break;
      }
      
      // required uint32 extension = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extension_)));
          set_has_extension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_continueTo;
        break;
      }
      
      // optional bool continueTo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continueTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &continueto_)));
          set_has_continueto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_continuedFrom;
        break;
      }
      
      // optional bool continuedFrom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continuedFrom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &continuedfrom_)));
          set_has_continuedfrom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_slideTo;
        break;
      }
      
      // optional bool slideTo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slideTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &slideto_)));
          set_has_slideto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slidedFrom;
        break;
      }
      
      // optional bool slidedFrom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slidedFrom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &slidedfrom_)));
          set_has_slidedfrom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vibrato;
        break;
      }
      
      // optional bool vibrato = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vibrato:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vibrato_)));
          set_has_vibrato();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_HO;
        break;
      }
      
      // optional bool HO = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ho_)));
          set_has_ho();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_PO;
        break;
      }
      
      // optional bool PO = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &po_)));
          set_has_po();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_grouping;
        break;
      }
      
      // optional uint32 grouping = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grouping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grouping_)));
          set_has_grouping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ungrouping;
        break;
      }
      
      // optional uint32 ungrouping = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ungrouping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ungrouping_)));
          set_has_ungrouping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_in_group;
        break;
      }
      
      // optional bool in_group = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_group_)));
          set_has_in_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_tone;
        break;
      }
      
      // repeated .Guitar_learning.LessonFile.Tone tone = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_tone;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LessonFile_Note::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Guitar_learning.LessonFile.NoteLength length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->length(), output);
  }
  
  // required uint32 extension = 2;
  if (has_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->extension(), output);
  }
  
  // optional bool continueTo = 3;
  if (has_continueto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->continueto(), output);
  }
  
  // optional bool continuedFrom = 4;
  if (has_continuedfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->continuedfrom(), output);
  }
  
  // optional bool slideTo = 5;
  if (has_slideto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->slideto(), output);
  }
  
  // optional bool slidedFrom = 6;
  if (has_slidedfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->slidedfrom(), output);
  }
  
  // optional bool vibrato = 7;
  if (has_vibrato()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->vibrato(), output);
  }
  
  // optional bool HO = 8;
  if (has_ho()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ho(), output);
  }
  
  // optional bool PO = 9;
  if (has_po()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->po(), output);
  }
  
  // optional uint32 grouping = 10;
  if (has_grouping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->grouping(), output);
  }
  
  // optional uint32 ungrouping = 11;
  if (has_ungrouping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ungrouping(), output);
  }
  
  // optional bool in_group = 12;
  if (has_in_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->in_group(), output);
  }
  
  // repeated .Guitar_learning.LessonFile.Tone tone = 13;
  for (int i = 0; i < this->tone_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->tone(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LessonFile_Note::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Guitar_learning.LessonFile.NoteLength length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->length(), target);
  }
  
  // required uint32 extension = 2;
  if (has_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->extension(), target);
  }
  
  // optional bool continueTo = 3;
  if (has_continueto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->continueto(), target);
  }
  
  // optional bool continuedFrom = 4;
  if (has_continuedfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->continuedfrom(), target);
  }
  
  // optional bool slideTo = 5;
  if (has_slideto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->slideto(), target);
  }
  
  // optional bool slidedFrom = 6;
  if (has_slidedfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->slidedfrom(), target);
  }
  
  // optional bool vibrato = 7;
  if (has_vibrato()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->vibrato(), target);
  }
  
  // optional bool HO = 8;
  if (has_ho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ho(), target);
  }
  
  // optional bool PO = 9;
  if (has_po()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->po(), target);
  }
  
  // optional uint32 grouping = 10;
  if (has_grouping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->grouping(), target);
  }
  
  // optional uint32 ungrouping = 11;
  if (has_ungrouping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ungrouping(), target);
  }
  
  // optional bool in_group = 12;
  if (has_in_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->in_group(), target);
  }
  
  // repeated .Guitar_learning.LessonFile.Tone tone = 13;
  for (int i = 0; i < this->tone_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->tone(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LessonFile_Note::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Guitar_learning.LessonFile.NoteLength length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->length());
    }
    
    // required uint32 extension = 2;
    if (has_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extension());
    }
    
    // optional bool continueTo = 3;
    if (has_continueto()) {
      total_size += 1 + 1;
    }
    
    // optional bool continuedFrom = 4;
    if (has_continuedfrom()) {
      total_size += 1 + 1;
    }
    
    // optional bool slideTo = 5;
    if (has_slideto()) {
      total_size += 1 + 1;
    }
    
    // optional bool slidedFrom = 6;
    if (has_slidedfrom()) {
      total_size += 1 + 1;
    }
    
    // optional bool vibrato = 7;
    if (has_vibrato()) {
      total_size += 1 + 1;
    }
    
    // optional bool HO = 8;
    if (has_ho()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool PO = 9;
    if (has_po()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 grouping = 10;
    if (has_grouping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grouping());
    }
    
    // optional uint32 ungrouping = 11;
    if (has_ungrouping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ungrouping());
    }
    
    // optional bool in_group = 12;
    if (has_in_group()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .Guitar_learning.LessonFile.Tone tone = 13;
  total_size += 1 * this->tone_size();
  for (int i = 0; i < this->tone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tone(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LessonFile_Note::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LessonFile_Note* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LessonFile_Note*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LessonFile_Note::MergeFrom(const LessonFile_Note& from) {
  GOOGLE_CHECK_NE(&from, this);
  tone_.MergeFrom(from.tone_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_extension()) {
      set_extension(from.extension());
    }
    if (from.has_continueto()) {
      set_continueto(from.continueto());
    }
    if (from.has_continuedfrom()) {
      set_continuedfrom(from.continuedfrom());
    }
    if (from.has_slideto()) {
      set_slideto(from.slideto());
    }
    if (from.has_slidedfrom()) {
      set_slidedfrom(from.slidedfrom());
    }
    if (from.has_vibrato()) {
      set_vibrato(from.vibrato());
    }
    if (from.has_ho()) {
      set_ho(from.ho());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_po()) {
      set_po(from.po());
    }
    if (from.has_grouping()) {
      set_grouping(from.grouping());
    }
    if (from.has_ungrouping()) {
      set_ungrouping(from.ungrouping());
    }
    if (from.has_in_group()) {
      set_in_group(from.in_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LessonFile_Note::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LessonFile_Note::CopyFrom(const LessonFile_Note& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LessonFile_Note::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < tone_size(); i++) {
    if (!this->tone(i).IsInitialized()) return false;
  }
  return true;
}

void LessonFile_Note::Swap(LessonFile_Note* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(extension_, other->extension_);
    std::swap(continueto_, other->continueto_);
    std::swap(continuedfrom_, other->continuedfrom_);
    std::swap(slideto_, other->slideto_);
    std::swap(slidedfrom_, other->slidedfrom_);
    std::swap(vibrato_, other->vibrato_);
    std::swap(ho_, other->ho_);
    std::swap(po_, other->po_);
    std::swap(grouping_, other->grouping_);
    std::swap(ungrouping_, other->ungrouping_);
    std::swap(in_group_, other->in_group_);
    tone_.Swap(&other->tone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LessonFile_Note::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LessonFile_Note_descriptor_;
  metadata.reflection = LessonFile_Note_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LessonFile_Bar::kIdFieldNumber;
const int LessonFile_Bar::kLengthFieldNumber;
const int LessonFile_Bar::kRepeatStartFieldNumber;
const int LessonFile_Bar::kRepeatEndFieldNumber;
const int LessonFile_Bar::kNextRepeatEndingFieldNumber;
const int LessonFile_Bar::kBarChordFieldNumber;
const int LessonFile_Bar::kNotesFieldNumber;
#endif  // !_MSC_VER

LessonFile_Bar::LessonFile_Bar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LessonFile_Bar::InitAsDefaultInstance() {
}

LessonFile_Bar::LessonFile_Bar(const LessonFile_Bar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LessonFile_Bar::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  length_ = 0u;
  repeat_start_ = false;
  repeat_end_ = 1u;
  next_repeat_ending_ = 0u;
  bar_chord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LessonFile_Bar::~LessonFile_Bar() {
  SharedDtor();
}

void LessonFile_Bar::SharedDtor() {
  if (bar_chord_ != &::google::protobuf::internal::kEmptyString) {
    delete bar_chord_;
  }
  if (this != default_instance_) {
  }
}

void LessonFile_Bar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LessonFile_Bar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessonFile_Bar_descriptor_;
}

const LessonFile_Bar& LessonFile_Bar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LessonFile_2eproto();  return *default_instance_;
}

LessonFile_Bar* LessonFile_Bar::default_instance_ = NULL;

LessonFile_Bar* LessonFile_Bar::New() const {
  return new LessonFile_Bar;
}

void LessonFile_Bar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    length_ = 0u;
    repeat_start_ = false;
    repeat_end_ = 1u;
    next_repeat_ending_ = 0u;
    if (has_bar_chord()) {
      if (bar_chord_ != &::google::protobuf::internal::kEmptyString) {
        bar_chord_->clear();
      }
    }
  }
  notes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LessonFile_Bar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }
      
      // optional uint32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_repeat_start;
        break;
      }
      
      // optional bool repeat_start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeat_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &repeat_start_)));
          set_has_repeat_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_repeat_end;
        break;
      }
      
      // optional uint32 repeat_end = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeat_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeat_end_)));
          set_has_repeat_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_next_repeat_ending;
        break;
      }
      
      // optional uint32 next_repeat_ending = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_repeat_ending:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_repeat_ending_)));
          set_has_next_repeat_ending();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bar_chord;
        break;
      }
      
      // optional string bar_chord = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bar_chord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bar_chord()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bar_chord().data(), this->bar_chord().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_notes;
        break;
      }
      
      // repeated .Guitar_learning.LessonFile.Note notes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_notes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LessonFile_Bar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }
  
  // optional bool repeat_start = 3;
  if (has_repeat_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->repeat_start(), output);
  }
  
  // optional uint32 repeat_end = 4 [default = 1];
  if (has_repeat_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->repeat_end(), output);
  }
  
  // optional uint32 next_repeat_ending = 5 [default = 0];
  if (has_next_repeat_ending()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->next_repeat_ending(), output);
  }
  
  // optional string bar_chord = 6;
  if (has_bar_chord()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bar_chord().data(), this->bar_chord().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bar_chord(), output);
  }
  
  // repeated .Guitar_learning.LessonFile.Note notes = 7;
  for (int i = 0; i < this->notes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->notes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LessonFile_Bar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }
  
  // optional bool repeat_start = 3;
  if (has_repeat_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->repeat_start(), target);
  }
  
  // optional uint32 repeat_end = 4 [default = 1];
  if (has_repeat_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->repeat_end(), target);
  }
  
  // optional uint32 next_repeat_ending = 5 [default = 0];
  if (has_next_repeat_ending()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->next_repeat_ending(), target);
  }
  
  // optional string bar_chord = 6;
  if (has_bar_chord()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bar_chord().data(), this->bar_chord().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bar_chord(), target);
  }
  
  // repeated .Guitar_learning.LessonFile.Note notes = 7;
  for (int i = 0; i < this->notes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->notes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LessonFile_Bar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }
    
    // optional bool repeat_start = 3;
    if (has_repeat_start()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 repeat_end = 4 [default = 1];
    if (has_repeat_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeat_end());
    }
    
    // optional uint32 next_repeat_ending = 5 [default = 0];
    if (has_next_repeat_ending()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_repeat_ending());
    }
    
    // optional string bar_chord = 6;
    if (has_bar_chord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bar_chord());
    }
    
  }
  // repeated .Guitar_learning.LessonFile.Note notes = 7;
  total_size += 1 * this->notes_size();
  for (int i = 0; i < this->notes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LessonFile_Bar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LessonFile_Bar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LessonFile_Bar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LessonFile_Bar::MergeFrom(const LessonFile_Bar& from) {
  GOOGLE_CHECK_NE(&from, this);
  notes_.MergeFrom(from.notes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_repeat_start()) {
      set_repeat_start(from.repeat_start());
    }
    if (from.has_repeat_end()) {
      set_repeat_end(from.repeat_end());
    }
    if (from.has_next_repeat_ending()) {
      set_next_repeat_ending(from.next_repeat_ending());
    }
    if (from.has_bar_chord()) {
      set_bar_chord(from.bar_chord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LessonFile_Bar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LessonFile_Bar::CopyFrom(const LessonFile_Bar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LessonFile_Bar::IsInitialized() const {
  
  for (int i = 0; i < notes_size(); i++) {
    if (!this->notes(i).IsInitialized()) return false;
  }
  return true;
}

void LessonFile_Bar::Swap(LessonFile_Bar* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(length_, other->length_);
    std::swap(repeat_start_, other->repeat_start_);
    std::swap(repeat_end_, other->repeat_end_);
    std::swap(next_repeat_ending_, other->next_repeat_ending_);
    std::swap(bar_chord_, other->bar_chord_);
    notes_.Swap(&other->notes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LessonFile_Bar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LessonFile_Bar_descriptor_;
  metadata.reflection = LessonFile_Bar_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LessonFile_Track::kClefFieldNumber;
const int LessonFile_Track::kBeatCountFieldNumber;
const int LessonFile_Track::kBeatLengthFieldNumber;
const int LessonFile_Track::kBarsFieldNumber;
#endif  // !_MSC_VER

LessonFile_Track::LessonFile_Track()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LessonFile_Track::InitAsDefaultInstance() {
}

LessonFile_Track::LessonFile_Track(const LessonFile_Track& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LessonFile_Track::SharedCtor() {
  _cached_size_ = 0;
  clef_ = 1;
  beat_count_ = 0u;
  beat_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LessonFile_Track::~LessonFile_Track() {
  SharedDtor();
}

void LessonFile_Track::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LessonFile_Track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LessonFile_Track::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessonFile_Track_descriptor_;
}

const LessonFile_Track& LessonFile_Track::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LessonFile_2eproto();  return *default_instance_;
}

LessonFile_Track* LessonFile_Track::default_instance_ = NULL;

LessonFile_Track* LessonFile_Track::New() const {
  return new LessonFile_Track;
}

void LessonFile_Track::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clef_ = 1;
    beat_count_ = 0u;
    beat_length_ = 0u;
  }
  bars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LessonFile_Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Guitar_learning.LessonFile.ClefType clef = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Guitar_learning::LessonFile_ClefType_IsValid(value)) {
            set_clef(static_cast< ::Guitar_learning::LessonFile_ClefType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beat_count;
        break;
      }
      
      // required uint32 beat_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beat_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beat_count_)));
          set_has_beat_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beat_length;
        break;
      }
      
      // required uint32 beat_length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beat_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beat_length_)));
          set_has_beat_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bars;
        break;
      }
      
      // repeated .Guitar_learning.LessonFile.Bar bars = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bars;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LessonFile_Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Guitar_learning.LessonFile.ClefType clef = 1;
  if (has_clef()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->clef(), output);
  }
  
  // required uint32 beat_count = 2;
  if (has_beat_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->beat_count(), output);
  }
  
  // required uint32 beat_length = 3;
  if (has_beat_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->beat_length(), output);
  }
  
  // repeated .Guitar_learning.LessonFile.Bar bars = 4;
  for (int i = 0; i < this->bars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bars(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LessonFile_Track::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Guitar_learning.LessonFile.ClefType clef = 1;
  if (has_clef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->clef(), target);
  }
  
  // required uint32 beat_count = 2;
  if (has_beat_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->beat_count(), target);
  }
  
  // required uint32 beat_length = 3;
  if (has_beat_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->beat_length(), target);
  }
  
  // repeated .Guitar_learning.LessonFile.Bar bars = 4;
  for (int i = 0; i < this->bars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bars(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LessonFile_Track::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Guitar_learning.LessonFile.ClefType clef = 1;
    if (has_clef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clef());
    }
    
    // required uint32 beat_count = 2;
    if (has_beat_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beat_count());
    }
    
    // required uint32 beat_length = 3;
    if (has_beat_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beat_length());
    }
    
  }
  // repeated .Guitar_learning.LessonFile.Bar bars = 4;
  total_size += 1 * this->bars_size();
  for (int i = 0; i < this->bars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bars(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LessonFile_Track::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LessonFile_Track* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LessonFile_Track*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LessonFile_Track::MergeFrom(const LessonFile_Track& from) {
  GOOGLE_CHECK_NE(&from, this);
  bars_.MergeFrom(from.bars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clef()) {
      set_clef(from.clef());
    }
    if (from.has_beat_count()) {
      set_beat_count(from.beat_count());
    }
    if (from.has_beat_length()) {
      set_beat_length(from.beat_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LessonFile_Track::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LessonFile_Track::CopyFrom(const LessonFile_Track& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LessonFile_Track::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < bars_size(); i++) {
    if (!this->bars(i).IsInitialized()) return false;
  }
  return true;
}

void LessonFile_Track::Swap(LessonFile_Track* other) {
  if (other != this) {
    std::swap(clef_, other->clef_);
    std::swap(beat_count_, other->beat_count_);
    std::swap(beat_length_, other->beat_length_);
    bars_.Swap(&other->bars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LessonFile_Track::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LessonFile_Track_descriptor_;
  metadata.reflection = LessonFile_Track_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* LessonFile_bgMysic_bgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessonFile_bgMysic_bgType_descriptor_;
}
bool LessonFile_bgMysic_bgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LessonFile_bgMysic_bgType LessonFile_bgMysic::NONE;
const LessonFile_bgMysic_bgType LessonFile_bgMysic::WMA;
const LessonFile_bgMysic_bgType LessonFile_bgMysic::MP3;
const LessonFile_bgMysic_bgType LessonFile_bgMysic::VORIBS;
const LessonFile_bgMysic_bgType LessonFile_bgMysic::bgType_MIN;
const LessonFile_bgMysic_bgType LessonFile_bgMysic::bgType_MAX;
const int LessonFile_bgMysic::bgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LessonFile_bgMysic::kTypeFieldNumber;
const int LessonFile_bgMysic::kHeaderFieldNumber;
const int LessonFile_bgMysic::kDataFieldNumber;
#endif  // !_MSC_VER

LessonFile_bgMysic::LessonFile_bgMysic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LessonFile_bgMysic::InitAsDefaultInstance() {
}

LessonFile_bgMysic::LessonFile_bgMysic(const LessonFile_bgMysic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LessonFile_bgMysic::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  header_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LessonFile_bgMysic::~LessonFile_bgMysic() {
  SharedDtor();
}

void LessonFile_bgMysic::SharedDtor() {
  if (header_ != &::google::protobuf::internal::kEmptyString) {
    delete header_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void LessonFile_bgMysic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LessonFile_bgMysic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessonFile_bgMysic_descriptor_;
}

const LessonFile_bgMysic& LessonFile_bgMysic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LessonFile_2eproto();  return *default_instance_;
}

LessonFile_bgMysic* LessonFile_bgMysic::default_instance_ = NULL;

LessonFile_bgMysic* LessonFile_bgMysic::New() const {
  return new LessonFile_bgMysic;
}

void LessonFile_bgMysic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_header()) {
      if (header_ != &::google::protobuf::internal::kEmptyString) {
        header_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LessonFile_bgMysic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Guitar_learning.LessonFile.bgMysic.bgType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Guitar_learning::LessonFile_bgMysic_bgType_IsValid(value)) {
            set_type(static_cast< ::Guitar_learning::LessonFile_bgMysic_bgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }
      
      // optional bytes header = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }
      
      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LessonFile_bgMysic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Guitar_learning.LessonFile.bgMysic.bgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional bytes header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->header(), output);
  }
  
  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LessonFile_bgMysic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Guitar_learning.LessonFile.bgMysic.bgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional bytes header = 2;
  if (has_header()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->header(), target);
  }
  
  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LessonFile_bgMysic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Guitar_learning.LessonFile.bgMysic.bgType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional bytes header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->header());
    }
    
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LessonFile_bgMysic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LessonFile_bgMysic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LessonFile_bgMysic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LessonFile_bgMysic::MergeFrom(const LessonFile_bgMysic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LessonFile_bgMysic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LessonFile_bgMysic::CopyFrom(const LessonFile_bgMysic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LessonFile_bgMysic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LessonFile_bgMysic::Swap(LessonFile_bgMysic* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(header_, other->header_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LessonFile_bgMysic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LessonFile_bgMysic_descriptor_;
  metadata.reflection = LessonFile_bgMysic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* LessonFile_Visuals_visualType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessonFile_Visuals_visualType_descriptor_;
}
bool LessonFile_Visuals_visualType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LessonFile_Visuals_visualType LessonFile_Visuals::NONE;
const LessonFile_Visuals_visualType LessonFile_Visuals::WMV;
const LessonFile_Visuals_visualType LessonFile_Visuals::MPEG2;
const LessonFile_Visuals_visualType LessonFile_Visuals::MPEG4;
const LessonFile_Visuals_visualType LessonFile_Visuals::DIVX;
const LessonFile_Visuals_visualType LessonFile_Visuals::XVID;
const LessonFile_Visuals_visualType LessonFile_Visuals::X264;
const LessonFile_Visuals_visualType LessonFile_Visuals::visualType_MIN;
const LessonFile_Visuals_visualType LessonFile_Visuals::visualType_MAX;
const int LessonFile_Visuals::visualType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LessonFile_Visuals::kTypeFieldNumber;
const int LessonFile_Visuals::kHeaderFieldNumber;
const int LessonFile_Visuals::kDataFieldNumber;
#endif  // !_MSC_VER

LessonFile_Visuals::LessonFile_Visuals()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LessonFile_Visuals::InitAsDefaultInstance() {
}

LessonFile_Visuals::LessonFile_Visuals(const LessonFile_Visuals& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LessonFile_Visuals::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  header_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LessonFile_Visuals::~LessonFile_Visuals() {
  SharedDtor();
}

void LessonFile_Visuals::SharedDtor() {
  if (header_ != &::google::protobuf::internal::kEmptyString) {
    delete header_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void LessonFile_Visuals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LessonFile_Visuals::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessonFile_Visuals_descriptor_;
}

const LessonFile_Visuals& LessonFile_Visuals::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LessonFile_2eproto();  return *default_instance_;
}

LessonFile_Visuals* LessonFile_Visuals::default_instance_ = NULL;

LessonFile_Visuals* LessonFile_Visuals::New() const {
  return new LessonFile_Visuals;
}

void LessonFile_Visuals::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_header()) {
      if (header_ != &::google::protobuf::internal::kEmptyString) {
        header_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LessonFile_Visuals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Guitar_learning.LessonFile.Visuals.visualType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Guitar_learning::LessonFile_Visuals_visualType_IsValid(value)) {
            set_type(static_cast< ::Guitar_learning::LessonFile_Visuals_visualType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }
      
      // optional bytes header = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }
      
      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LessonFile_Visuals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Guitar_learning.LessonFile.Visuals.visualType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional bytes header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->header(), output);
  }
  
  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LessonFile_Visuals::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Guitar_learning.LessonFile.Visuals.visualType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional bytes header = 2;
  if (has_header()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->header(), target);
  }
  
  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LessonFile_Visuals::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Guitar_learning.LessonFile.Visuals.visualType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional bytes header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->header());
    }
    
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LessonFile_Visuals::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LessonFile_Visuals* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LessonFile_Visuals*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LessonFile_Visuals::MergeFrom(const LessonFile_Visuals& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LessonFile_Visuals::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LessonFile_Visuals::CopyFrom(const LessonFile_Visuals& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LessonFile_Visuals::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LessonFile_Visuals::Swap(LessonFile_Visuals* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(header_, other->header_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LessonFile_Visuals::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LessonFile_Visuals_descriptor_;
  metadata.reflection = LessonFile_Visuals_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LessonFile_Lesson::kTrackFieldNumber;
const int LessonFile_Lesson::kBpmFieldNumber;
const int LessonFile_Lesson::kBgMusicFieldNumber;
const int LessonFile_Lesson::kVisualsFieldNumber;
#endif  // !_MSC_VER

LessonFile_Lesson::LessonFile_Lesson()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LessonFile_Lesson::InitAsDefaultInstance() {
  track_ = const_cast< ::Guitar_learning::LessonFile_Track*>(&::Guitar_learning::LessonFile_Track::default_instance());
  bg_music_ = const_cast< ::Guitar_learning::LessonFile_bgMysic*>(&::Guitar_learning::LessonFile_bgMysic::default_instance());
  visuals_ = const_cast< ::Guitar_learning::LessonFile_Visuals*>(&::Guitar_learning::LessonFile_Visuals::default_instance());
}

LessonFile_Lesson::LessonFile_Lesson(const LessonFile_Lesson& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LessonFile_Lesson::SharedCtor() {
  _cached_size_ = 0;
  track_ = NULL;
  bpm_ = 0u;
  bg_music_ = NULL;
  visuals_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LessonFile_Lesson::~LessonFile_Lesson() {
  SharedDtor();
}

void LessonFile_Lesson::SharedDtor() {
  if (this != default_instance_) {
    delete track_;
    delete bg_music_;
    delete visuals_;
  }
}

void LessonFile_Lesson::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LessonFile_Lesson::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessonFile_Lesson_descriptor_;
}

const LessonFile_Lesson& LessonFile_Lesson::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LessonFile_2eproto();  return *default_instance_;
}

LessonFile_Lesson* LessonFile_Lesson::default_instance_ = NULL;

LessonFile_Lesson* LessonFile_Lesson::New() const {
  return new LessonFile_Lesson;
}

void LessonFile_Lesson::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_track()) {
      if (track_ != NULL) track_->::Guitar_learning::LessonFile_Track::Clear();
    }
    bpm_ = 0u;
    if (has_bg_music()) {
      if (bg_music_ != NULL) bg_music_->::Guitar_learning::LessonFile_bgMysic::Clear();
    }
    if (has_visuals()) {
      if (visuals_ != NULL) visuals_->::Guitar_learning::LessonFile_Visuals::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LessonFile_Lesson::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Guitar_learning.LessonFile.Track track = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bpm;
        break;
      }
      
      // optional uint32 bpm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bpm_)));
          set_has_bpm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bg_music;
        break;
      }
      
      // optional .Guitar_learning.LessonFile.bgMysic bg_music = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bg_music:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bg_music()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_visuals;
        break;
      }
      
      // optional .Guitar_learning.LessonFile.Visuals visuals = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visuals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visuals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LessonFile_Lesson::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Guitar_learning.LessonFile.Track track = 1;
  if (has_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->track(), output);
  }
  
  // optional uint32 bpm = 2;
  if (has_bpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bpm(), output);
  }
  
  // optional .Guitar_learning.LessonFile.bgMysic bg_music = 3;
  if (has_bg_music()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bg_music(), output);
  }
  
  // optional .Guitar_learning.LessonFile.Visuals visuals = 4;
  if (has_visuals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->visuals(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LessonFile_Lesson::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Guitar_learning.LessonFile.Track track = 1;
  if (has_track()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->track(), target);
  }
  
  // optional uint32 bpm = 2;
  if (has_bpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bpm(), target);
  }
  
  // optional .Guitar_learning.LessonFile.bgMysic bg_music = 3;
  if (has_bg_music()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bg_music(), target);
  }
  
  // optional .Guitar_learning.LessonFile.Visuals visuals = 4;
  if (has_visuals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->visuals(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LessonFile_Lesson::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Guitar_learning.LessonFile.Track track = 1;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->track());
    }
    
    // optional uint32 bpm = 2;
    if (has_bpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bpm());
    }
    
    // optional .Guitar_learning.LessonFile.bgMysic bg_music = 3;
    if (has_bg_music()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bg_music());
    }
    
    // optional .Guitar_learning.LessonFile.Visuals visuals = 4;
    if (has_visuals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visuals());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LessonFile_Lesson::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LessonFile_Lesson* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LessonFile_Lesson*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LessonFile_Lesson::MergeFrom(const LessonFile_Lesson& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_track()) {
      mutable_track()->::Guitar_learning::LessonFile_Track::MergeFrom(from.track());
    }
    if (from.has_bpm()) {
      set_bpm(from.bpm());
    }
    if (from.has_bg_music()) {
      mutable_bg_music()->::Guitar_learning::LessonFile_bgMysic::MergeFrom(from.bg_music());
    }
    if (from.has_visuals()) {
      mutable_visuals()->::Guitar_learning::LessonFile_Visuals::MergeFrom(from.visuals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LessonFile_Lesson::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LessonFile_Lesson::CopyFrom(const LessonFile_Lesson& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LessonFile_Lesson::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_track()) {
    if (!this->track().IsInitialized()) return false;
  }
  if (has_bg_music()) {
    if (!this->bg_music().IsInitialized()) return false;
  }
  if (has_visuals()) {
    if (!this->visuals().IsInitialized()) return false;
  }
  return true;
}

void LessonFile_Lesson::Swap(LessonFile_Lesson* other) {
  if (other != this) {
    std::swap(track_, other->track_);
    std::swap(bpm_, other->bpm_);
    std::swap(bg_music_, other->bg_music_);
    std::swap(visuals_, other->visuals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LessonFile_Lesson::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LessonFile_Lesson_descriptor_;
  metadata.reflection = LessonFile_Lesson_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LessonFile::kCreatorFieldNumber;
const int LessonFile::kLessonFieldNumber;
const int LessonFile::kSignatureFieldNumber;
#endif  // !_MSC_VER

LessonFile::LessonFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LessonFile::InitAsDefaultInstance() {
  lesson_ = const_cast< ::Guitar_learning::LessonFile_Lesson*>(&::Guitar_learning::LessonFile_Lesson::default_instance());
}

LessonFile::LessonFile(const LessonFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LessonFile::SharedCtor() {
  _cached_size_ = 0;
  creator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lesson_ = NULL;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LessonFile::~LessonFile() {
  SharedDtor();
}

void LessonFile::SharedDtor() {
  if (creator_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
    delete lesson_;
  }
}

void LessonFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LessonFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessonFile_descriptor_;
}

const LessonFile& LessonFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LessonFile_2eproto();  return *default_instance_;
}

LessonFile* LessonFile::default_instance_ = NULL;

LessonFile* LessonFile::New() const {
  return new LessonFile;
}

void LessonFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_creator()) {
      if (creator_ != &::google::protobuf::internal::kEmptyString) {
        creator_->clear();
      }
    }
    if (has_lesson()) {
      if (lesson_ != NULL) lesson_->::Guitar_learning::LessonFile_Lesson::Clear();
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LessonFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string creator = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creator().data(), this->creator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lesson;
        break;
      }
      
      // required .Guitar_learning.LessonFile.Lesson lesson = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lesson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lesson()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signature;
        break;
      }
      
      // optional string signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LessonFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string creator = 1;
  if (has_creator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->creator(), output);
  }
  
  // required .Guitar_learning.LessonFile.Lesson lesson = 2;
  if (has_lesson()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lesson(), output);
  }
  
  // optional string signature = 3;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LessonFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string creator = 1;
  if (has_creator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->creator(), target);
  }
  
  // required .Guitar_learning.LessonFile.Lesson lesson = 2;
  if (has_lesson()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lesson(), target);
  }
  
  // optional string signature = 3;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LessonFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string creator = 1;
    if (has_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator());
    }
    
    // required .Guitar_learning.LessonFile.Lesson lesson = 2;
    if (has_lesson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lesson());
    }
    
    // optional string signature = 3;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LessonFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LessonFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LessonFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LessonFile::MergeFrom(const LessonFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator()) {
      set_creator(from.creator());
    }
    if (from.has_lesson()) {
      mutable_lesson()->::Guitar_learning::LessonFile_Lesson::MergeFrom(from.lesson());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LessonFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LessonFile::CopyFrom(const LessonFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LessonFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_lesson()) {
    if (!this->lesson().IsInitialized()) return false;
  }
  return true;
}

void LessonFile::Swap(LessonFile* other) {
  if (other != this) {
    std::swap(creator_, other->creator_);
    std::swap(lesson_, other->lesson_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LessonFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LessonFile_descriptor_;
  metadata.reflection = LessonFile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Guitar_learning

// @@protoc_insertion_point(global_scope)
